CREATE DATABASE IF NOT EXISTS Watchman_iCAD;

DROP TABLE IF EXISTS Incident;
CREATE TABLE `Incident` (
	`EventNo` VARCHAR(16) NOT NULL PRIMARY KEY,
	`IncidentNo` VARCHAR(16) NOT NULL,
	`Timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`EntryTime` DATETIME NOT NULL,
	`OpenTime` DATETIME NULL DEFAULT NULL,
	`DispatchTime` DATETIME NULL DEFAULT NULL,
	`EnrouteTime` DATETIME NULL DEFAULT NULL,
	`OnsceneTime` DATETIME NULL DEFAULT NULL,
	`CloseTime` DATETIME NULL DEFAULT NULL,
	`Status` VARCHAR(16) NOT NULL DEFAULT 'PENDING', -- PENDING, ASSIGNED, DISPATCHED, CLOSED, CANCELLED
	`CallType` VARCHAR(24) NOT NULL,
	`Nature` VARCHAR(80) NOT NULL,
	`BoxArea` VARCHAR(6) NOT NULL,
	`StationGrid` VARCHAR(12) NULL DEFAULT NULL,
	`Location` VARCHAR(255) NOT NULL,
	`LocationNote` VARCHAR(255) NULL DEFAULT NULL,
	`CrossSt1` VARCHAR(255) NULL DEFAULT NULL,
	`CrossSt2` VARCHAR(255) NULL DEFAULT NULL,
	`GPSLatitude` VARCHAR(64) NOT NULL DEFAULT '0',
	`GPSLongitude` VARCHAR(64) NOT NULL DEFAULT '0',
	`Priority` VARCHAR(3) NULL DEFAULT NULL,
	`RadioTac` VARCHAR(6) NULL DEFAULT NULL,
	`MapGrid` VARCHAR(12) NULL DEFAULT NULL,
	KEY `IncidentNo` ( `IncidentNo` ),
	KEY `Timestamp` ( `Timestamp` )
) ENGINE=MYISAM;

DROP TABLE IF EXISTS IncidentNotes;
CREATE TABLE `IncidentNotes` (
	`NoteId` VARCHAR(20) NOT NULL PRIMARY KEY,
	`Timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`IncidentNo` VARCHAR(16) NOT NULL,
	`NoteTime` DATETIME NOT NULL,
	`EntryType` VARCHAR(16) NULL DEFAULT NULL,
	`EntryFDID` VARCHAR(12) NULL DEFAULT NULL,
	`Operator` VARCHAR(24) NULL DEFAULT NULL,
	`Note` VARCHAR(255) NOT NULL,
	KEY `IncidentNo` ( `IncidentNo` )
) ENGINE=MYISAM;

DROP TABLE IF EXISTS IncidentUnit;
CREATE TABLE `IncidentUnit` (
	`UnitId` VARCHAR(20) NOT NULL PRIMARY KEY,
	`Timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`Unit` VARCHAR(12) NOT NULL,
	`IncidentNo` VARCHAR(16) NOT NULL,
	`AlertTrans` INT NULL DEFAULT NULL,
	`Dispatch` DATETIME NULL DEFAULT NULL,
	`Enroute` DATETIME NULL DEFAULT NULL,
	`OnScene` DATETIME NULL DEFAULT NULL,
	`InService` DATETIME NULL DEFAULT NULL,
	`Status` TINYINT(1) NULL DEFAULT NULL,
	`Closed` TINYINT(1) NOT NULL DEFAULT 0,
	KEY `UnitId` ( `UnitId` ),
	KEY `IncidentNo` ( `IncidentNo` )
) ENGINE=MYISAM;

DROP TABLE IF EXISTS AlertTrans;
CREATE TABLE `AlertTrans` (
	`TransId` INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	`Timestamp` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`IncidentNo` VARCHAR(16) NOT NULL,
	`Station` VARCHAR(12) NOT NULL,
	`AlertTime` DATETIME NULL DEFAULT NULL,
	`Status` TINYINT(1) NOT NULL DEFAULT -1, -- -1 Pending, -2 In Progress, 0 Failed, 1 Successful
	`ConfirmTime` DATETIME NULL DEFAULT NULL,
	`Result` VARCHAR(128) NULL DEFAULT NULL,
	Key `IncidentNo` ( `IncidentNo` )
) ENGINE=MYISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1000;

DROP TABLE IF EXISTS Station;
CREATE TABLE `Station` (
    `Station` VARCHAR(12) NOT NULL PRIMARY KEY,
    `DeptName` VARCHAR(128) NOT NULL,
    `PrimaryIp` VARCHAR(16) NOT NULL,
    `PrimaryPort` VARCHAR(5) NOT NULL,
    `SecondaryIp` VARCHAR(16) NULL DEFAULT NULL,
    `SecondaryPort` VARCHAR(5) NULL DEFAULT NULL,
    `Inactive` TINYINT(1) DEFAULT 0
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS StationUnit;
CREATE TABLE `StationUnit` (
	`UnitId` VARCHAR(12) NOT NULL PRIMARY KEY,
	`Station` VARCHAR(12) NOT NULL,
	`UnitLabel` VARCHAR(16) NOT NULL,
	`Inactive` TINYINT(1) DEFAULT 0,
	KEY `UnitId` ( `UnitId` ),
	KEY `Station` ( `Station` )
) ENGINE=MyISAM DEFAULT CHARaSET=utf8;

delimiter $$

DROP TRIGGER IF EXISTS `Trigg_UnitDispatch` $$
CREATE TRIGGER Trigg_UnitDispatch
BEFORE INSERT ON IncidentUnit
FOR EACH ROW
BEGIN

DECLARE DispFlag INT DEFAULT 0;
DECLARE RowExists INT DEFAULT 0;

SELECT COUNT(*) INTO RowExists
FROM IncidentUnit t1
WHERE t1.UnitId = NEW.UnitId;

IF RowExists = 0 THEN

	SELECT COUNT( * ) INTO DispFlag
	FROM StationUnit t1
	WHERE t1.UnitId = NEW.Unit AND t1.Inactive = 0;

	IF DispFlag > 0 THEN
		SET New.AlertTrans = -1;
	END IF;

END IF;

END $$

DROP TRIGGER IF EXISTS `Trigg_ActiveIncidentRelabel` $$
CREATE TRIGGER Trigg_ActiveIncidentRelabel
AFTER UPDATE ON Incident
FOR EACH ROW
BEGIN

IF OLD.IncidentNo LIKE 'W%' AND NEW.IncidentNo LIKE '20%' THEN

	UPDATE IncidentNotes
	SET IncidentNo = NEW.IncidentNo, NoteId = REPLACE( NoteId, CONCAT( OLD.IncidentNo, '_' ), CONCAT( NEW.IncidentNo, '_' ) )
	WHERE IncidentNo = OLD.IncidentNo;

END IF;

END $$

delimiter ;