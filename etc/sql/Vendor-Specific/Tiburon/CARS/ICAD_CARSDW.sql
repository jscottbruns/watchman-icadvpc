-- iCAD-VPC TABLE SCHEMA FOR TIBURON CARS/DW CAD


-- 
-- Function: EntryChange
--    Descr: Function for displaying changed incident segments (i.e. call type change, location change, etc)
--

DELIMITER ;;

DROP FUNCTION IF EXISTS EntryChange ;;
CREATE FUNCTION EntryChange ( EventKey VARCHAR(25) ) RETURNS VARCHAR(255)
DETERMINISTIC
READS SQL DATA
BEGIN

DECLARE ValOrig VARCHAR(100);
DECLARE ValNew VARCHAR(100);
DECLARE FinalText VARCHAR(255);

SET FinalText = ' ';

SELECT t1.EntryCallType, t2.EntryCallType 
INTO ValOrig, ValNew 
FROM IncidentNotes t1
LEFT JOIN IncidentNotes t2 ON t1.EventNo = t2.EventNo AND t2.EntryType = 'ENTRY'
WHERE t1.EventNo = EventKey AND t1.EntryType = 'CREATE';

IF ValOrig != ValNew THEN
    SET FinalText = CONCAT('[Type:] ', ValOrig, '[-->]', ValNew, ' ');
END IF;

SET ValOrig = '';
SET ValNew = '';

SELECT t1.EntryCallDesc, t2.EntryCallDesc 
INTO ValOrig, ValNew 
FROM IncidentNotes t1
LEFT JOIN IncidentNotes t2 ON t1.EventNo = t2.EventNo AND t2.EntryType = 'ENTRY'
WHERE t1.EventNo = EventKey AND t1.EntryType = 'CREATE';

IF ValOrig != ValNew THEN
    SET FinalText = CONCAT('[TypeDesc:] ', ValOrig, '[-->]', ValNew, ' ');
END IF;

RETURN FinalText; 

END ;;

DELIMITER ;

--
-- Table: CARSCALL
-- Descr: Mirrored table for primary incident records
--

DROP TABLE IF EXISTS CARSCALL;
CREATE TABLE `CARSCALL` (
	`CALLKEY` VARCHAR(25) NOT NULL,
	`CREATE_TIMESTAMP` DATETIME,
	`TIMESTAMP` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`AGENCY` VARCHAR(25) NULL DEFAULT NULL,
	`SERVICE` VARCHAR(25) NULL DEFAULT NULL,
	`CALL_NO` VARCHAR(25) NULL DEFAULT NULL,
	`DUPLICATED_TO_CALL_NO` VARCHAR(25) NULL DEFAULT NULL,
	`POLICE_ASSC_CALL_NO` VARCHAR(25) NULL DEFAULT NULL,
	`FIRE_ASSC_CALL_NO` VARCHAR(25) NULL DEFAULT NULL,
	`EMS_ASSC_CALL_NO` VARCHAR(25) NULL DEFAULT NULL,				
	`REPORT_NO` VARCHAR(25) NULL DEFAULT NULL,
	`CALL_TYPE_ORIG` VARCHAR(25) NULL DEFAULT NULL,
	`CALL_TYPE_ORIG_D` VARCHAR(100) NULL DEFAULT NULL,
	`CALL_TYPE_FINAL` VARCHAR(25) NULL DEFAULT NULL,
	`CALL_TYPE_FINAL_D` VARCHAR(100) NULL DEFAULT NULL,
	`PRIORITY` VARCHAR(25) NULL DEFAULT NULL,
	`DISPOSITION` VARCHAR(25) NULL DEFAULT NULL, 
	`PRIMARY_UNIT` VARCHAR(25) NULL DEFAULT NULL,
	`BEAT_OR_STATION` VARCHAR(25) NULL DEFAULT NULL,
	`CURR_DGROUP` VARCHAR(25) NULL DEFAULT NULL,
	`GEOGRAPHIC_AREA` VARCHAR(25) NULL DEFAULT NULL,	 
	`REP_DIST` VARCHAR(25) NULL DEFAULT NULL,
	`LOCATION` VARCHAR(100) NULL DEFAULT NULL,
	`LOCATION_ADDRESS` VARCHAR(255) NULL DEFAULT NULL,
	`LOCATION_INFO` VARCHAR(250) NULL DEFAULT NULL,	
	`XCOORD` VARCHAR(25) NULL DEFAULT NULL,
	`YCOORD` VARCHAR(25)  NULL DEFAULT NULL,
	`APARTMENT` VARCHAR(25) NULL DEFAULT NULL,
	`CITY_CODE` VARCHAR(25) NULL DEFAULT NULL,
	`CITY_NAME` VARCHAR(255) NULL DEFAULT NULL,
	`COMP_NAME` VARCHAR(100) NULL,
	`COMP_PHONE` VARCHAR(100) NULL,
	`COMP_ADDRESS` VARCHAR(255) NULL,	
	`MAP_PAGE` VARCHAR(100) NULL DEFAULT NULL,
	`HAZARD` VARCHAR(1) NULL DEFAULT NULL,
	`PRIORS` VARCHAR(1) NULL DEFAULT NULL,
	`CALL_CREATED_INT` INT NULL DEFAULT 0,
	`CALL_ENTRY_INT` INT NULL DEFAULT 0,
	`CALL_DISPATCH_INT` INT NULL DEFAULT 0,
	`CALL_ENROUTE_INT` INT NULL DEFAULT 0,
	`CALL_ONSCENE_INT` INT NULL DEFAULT 0,
	`CALL_CLOSE_INT` INT NULL DEFAULT 0,
	`CALL_GEOXCOORD` VARCHAR(25) NULL DEFAULT NULL,
	`CALL_GEOYCOORD` VARCHAR(25) NULL DEFAULT NULL,
	PRIMARY KEY ( CALLKEY ),
	INDEX CALL_NO ( CALL_NO ),
	INDEX CALL_CREATED_INT ( CALL_CREATED_INT ),	
	INDEX CALL_CLOSE_INT ( CALL_CLOSE_INT )
) ENGINE=INNODB;

--
-- Table: CARSCALLUNIT
-- Descr: Mirrored table for unit assignment/dispatch records
--

DROP TABLE IF EXISTS CARSCALLUNIT;
CREATE TABLE `CARSCALLUNIT` (
	`CALLKEY` VARCHAR(25) NOT NULL,
	`TIMESTAMP` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`UNITKEY` VARCHAR(255) NOT NULL,
	`UNIT_ID` VARCHAR(255) NOT NULL,
	`CALL_NO` VARCHAR(255) NOT NULL,
	`UNIT_DISPATCH_INT` INT NULL DEFAULT 0,
	`UNIT_ENROUTE_INT` INT NULL DEFAULT 0,
	`UNIT_ONSCENE_INT` INT NULL DEFAULT 0,
	`UNIT_PREEMPT_INT` INT NULL DEFAULT 0,
	`UNIT_CLEAR_INT` INT NULL DEFAULT 0,
	`AlertTrans` INT NULL DEFAULT NULL,
	PRIMARY KEY ( `CALLKEY`, `UNIT_DISPATCH_INT`, `UNITKEY` ),
	INDEX CALLUNIT_CALL_NO ( CALL_NO ),
	INDEX CALLUNIT_UNIT_CLEAR_INT ( UNIT_CLEAR_INT ),
	INDEX CALLUNIT_UNIT_DISPATCH_INT ( UNIT_DISPATCH_INT ),
	INDEX CALLUNIT_UNIT_ID ( UNIT_ID ),
	INDEX CALLUNIT_ALERT_TRANS ( AlertTrans ),
	FOREIGN KEY ( `CALLKEY` ) REFERENCES CARSCALL ( `CALLKEY` )
) ENGINE=INNODB;

--
-- Table: CARSNARRATIVE
-- Descr: Mirrored table for incident calltaking/proqa records
--

DROP TABLE IF EXISTS CARSNARRATIVE;
CREATE TABLE `CARSNARRATIVE` (	
	`TIMESTAMP` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=INNODB;
	
	
--
-- Table: CARSSEGMENTS
-- Descr: Mirrored tabled for incident narrative/event sequence records
--	
	
DROP TABLE IF EXISTS CARSSEGMENTS;
CREATE TABLE CARSSEGMENTS (
	`CALLKEY` VARCHAR(25) NOT NULL,
	`TIMESTAMP` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	`SEGMENT_NAME` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_SEQ_CTRL` INT NOT NULL,
	`SEGMENT_CASE_NO` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_INT` INT NULL DEFAULT NULL,
	`SEGMENT_TRUE_INT` INT NULL DEFAULT NULL,
	`SEGMENT_CALL_NO` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_UNIT` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_OPERATOR` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_LOCATION` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_CALLTYPE` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_CALLDESC` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_LOCINFO` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_RP_NAME` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_ADDRESS` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_PHONE` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_SOURCE` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_CONTACT` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_DISPOSITION` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_GROUP` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_AREA` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_PRIORITY` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_AGENCY` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_SERVICE` VARCHAR(1) NULL DEFAULT NULL,
	`SEGMENT_LINC_CALL` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_911_PHONE` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_911_LOCATION` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_911_CALLER` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_911_SOURCE` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_911_LATITUDE` VARCHAR(25)NULL DEFAULT NULL,
	`SEGMENT_911_LONGITUDE` VARCHAR(25)NULL DEFAULT NULL,
	`SEGMENT_GEOXCOORD` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_GEOYCOORD` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_MAPPAGE` VARCHAR(100) NULL DEFAULT NULL,
	`SEGMENT_DISTRICT` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_CROSS_STS` VARCHAR(100) NULL DEFAULT NULL,	
	`SEGMENT_PROQA_CLASS` VARCHAR(255) NULL DEFAULT NULL,
	`SEGMENT_OPERID_LIST` VARCHAR(255) NULL DEFAULT NULL,
	`SEGMENT_OPERNAMES` VARCHAR(255) NULL DEFAULT NULL,
	`SEGMENT_INCIDENT_COMMANDER` VARCHAR(25) NULL DEFAULT NULL,
	`SEGMENT_NOTIFIED` VARCHAR(255) NULL DEFAULT NULL,
	`SEGMENT_NARRATIVE` TEXT NULL DEFAULT NULL,
	PRIMARY KEY ( `CALLKEY`, `SEGMENT_SEQ_CTRL` ),
	FOREIGN KEY ( `CALLKEY` ) REFERENCES CARSCALL ( `CALLKEY` )
) ENGINE=INNODB; 	
	
-- 
-- View: Incident
-- 	
	
DROP VIEW IF EXISTS Incident;
CREATE VIEW Incident AS
  SELECT 
	CALLKEY AS EventNo,
	TIMESTAMP AS Timestamp,
	AGENCY AS Agency,
	SERVICE AS Service,
	CALL_NO AS IncidentNo,
	DUPLICATED_TO_CALL_NO AS DuplicateIncidentNo,
	POLICE_ASSC_CALL_NO AS PoliceIncidentNo,
	FIRE_ASSC_CALL_NO AS FireIncidentNo,
	EMS_ASSC_CALL_NO AS EmsIncidentNo,	
	REPORT_NO AS ReportNo,
	CALL_TYPE_ORIG AS CallTypeOrig,
	CALL_TYPE_ORIG_D AS NatureOrig,
	CALL_TYPE_FINAL AS CallType,
	CALL_TYPE_FINAL_D AS Nature,
	PRIORITY AS Priority,
	DISPOSITION AS Disposition, 
	PRIMARY_UNIT AS PrimaryUnit,
	BEAT_OR_STATION AS StationGrid,
	CURR_DGROUP AS District,	 
	REP_DIST AS BoxArea,
	LOCATION AS LocationDescr, -- Had been updated from Location
	LOCATION_ADDRESS AS LocationAddress,
	LOCATION_INFO AS LocationNote,
	APARTMENT AS LocationApartment,
	XCOORD AS GPSLatitude,
	YCOORD AS GPSLongitude,	
	CITY_CODE AS CityCode,
	CITY_NAME AS CityName,
	COMP_NAME AS CallerName,
	COMP_PHONE AS CallerPhone,
	COMP_ADDRESS AS CallerAddress,
	MAP_PAGE AS MapGrid,
	HAZARD AS Hazards,
	PRIORS AS Priors,
	CALL_CREATED_INT AS CreatedTime,
	CALL_ENTRY_INT AS EntryTime,
	CALL_DISPATCH_INT AS DispatchTime,
	CALL_ENROUTE_INT AS EnrouteTime,
	CALL_ONSCENE_INT AS OnsceneTime,
	CALL_CLOSE_INT AS CloseTime,
	CASE 
	WHEN CALL_CREATED_INT > 0 AND CALL_DISPATCH_INT = 0 AND CALL_CLOSE_INT = 0 THEN	
		-1 -- PENDING
	WHEN CALL_CREATED_INT > 0 AND CALL_DISPATCH_INT > 0 AND CALL_ENROUTE_INT = 0 AND CALL_ONSCENE_INT = 0 AND CALL_CLOSE_INT = 0 THEN
		1 -- DISPATCHED
	WHEN CALL_CREATED_INT > 0 AND CALL_DISPATCH_INT > 0 AND CALL_ENROUTE_INT > 0 AND CALL_ONSCENE_INT = 0 AND CALL_CLOSE_INT = 0 THEN
		2 -- ENROUTE
	WHEN CALL_CREATED_INT > 0 AND CALL_DISPATCH_INT > 0 AND CALL_ENROUTE_INT > 0 AND CALL_ONSCENE_INT > 0 AND CALL_CLOSE_INT = 0 THEN
		3 -- ONSCENE
	WHEN CALL_CREATED_INT > 0 AND CALL_CLOSE_INT > 0 THEN
		0 -- CLOSED
	END AS IncStatus,		
	CALL_GEOXCOORD AS GeoXCoord,
	CALL_GEOYCOORD AS GeoYCoord
  FROM CARSCALL;
  	


-- 
-- View: IncidentNotes
-- 	

DROP VIEW IF EXISTS IncidentNotes;
CREATE VIEW IncidentNotes AS 
  SELECT
    CONCAT(CALLKEY, SEGMENT_SEQ_CTRL) AS EntryId,
    `TIMESTAMP` AS Timestamp,
    SEGMENT_SEQ_CTRL AS EntrySequence,
    CALLKEY AS EventNo,
    SEGMENT_CALL_NO AS IncidentNo,
    SEGMENT_INT AS EntryTime,
    SEGMENT_TRUE_INT AS EntryUTCTime,
    SEGMENT_NAME AS EntryType,
    SEGMENT_UNIT AS EntryUnit,
    SEGMENT_OPERATOR AS EntryFDID,
    SEGMENT_LOCATION AS EntryLocation,
    SEGMENT_LOCINFO AS EntryLocationInfo,
    SEGMENT_CROSS_STS AS EntryCrossStreets,
    SEGMENT_MAPPAGE AS EntryMapGrid,
    SEGMENT_CALLTYPE AS EntryCallType,
    SEGMENT_CALLDESC AS EntryCallDesc,
    SEGMENT_PROQA_CLASS AS EntryProQA_Type,
    SEGMENT_RP_NAME AS EntryRP_Name,
    SEGMENT_ADDRESS AS EntryRP_Address,
    SEGMENT_PHONE AS EntryRP_Phone,
    SEGMENT_SOURCE AS EntrySource,
    SEGMENT_CONTACT AS EntryContact,
    SEGMENT_GROUP AS EntryGroup,
    SEGMENT_AREA AS EntryArea,
    SEGMENT_PRIORITY AS EntryPriority,
    SEGMENT_AGENCY AS EntryAgency,
    SEGMENT_OPERATOR AS EntryOperator,
    CASE
    WHEN SEGMENT_NAME = 'CREATE' THEN
    	CONCAT(
    		IF(SEGMENT_LOCATION IS NOT NULL, CONCAT('[Location:] ', SEGMENT_LOCATION, ' '), ''), 
    		IF(SEGMENT_CROSS_STS IS NOT NULL, CONCAT(SEGMENT_CROSS_STS, ' '), ''),
    		IF(SEGMENT_LOCINFO IS NOT NULL, CONCAT('[LocInfo:] ', SEGMENT_LOCINFO, ' '), ''),
    		IF(SEGMENT_CALLTYPE IS NOT NULL, CONCAT('[Type:] ', SEGMENT_CALLTYPE, ' '), ''), 
    		IF(SEGMENT_CALLDESC IS NOT NULL, CONCAT(SEGMENT_CALLDESC, ' '), ''),
    		IF(SEGMENT_RP_NAME IS NOT NULL, CONCAT('[Caller:] ', SEGMENT_RP_NAME, ' ', IF(SEGMENT_ADDRESS IS NOT NULL, CONCAT(SEGMENT_ADDRESS, ' '), ''), IF(SEGMENT_PHONE IS NOT NULL, CONCAT(SEGMENT_PHONE, ' '), '')), ''), 
    		IF(SEGMENT_GROUP IS NOT NULL, CONCAT('[District:] ', SEGMENT_GROUP, ' '), ''),
    		IF(SEGMENT_AREA IS NOT NULL, CONCAT('[Zone/Box:] ', SEGMENT_AREA, ' '), ''),
    		IF(SEGMENT_PRIORITY IS NOT NULL, CONCAT('[Priority:] ', SEGMENT_PRIORITY, ' '), ''),
    		IF(SEGMENT_AGENCY IS NOT NULL, CONCAT('[Agency:] ', SEGMENT_AGENCY, ' '), ''),
    		IF(SEGMENT_MAPPAGE IS NOT NULL, CONCAT('[Map/Grid:] ', SEGMENT_MAPPAGE, ' '), '')
    	)
    WHEN SEGMENT_NAME = 'ENTRY' THEN
    	CONCAT(
    		EntryChange( CALLKEY ),
	    	IF(SEGMENT_NARRATIVE IS NOT NULL, CONCAT('[Comment:] ', SEGMENT_NARRATIVE), '')
	    )  
    WHEN SEGMENT_NAME = 'ALI' THEN
    	CONCAT(
    		IF(SEGMENT_911_PHONE IS NOT NULL, CONCAT('[E911/Phone:] ', SEGMENT_911_PHONE, ' '), ''),
    		IF(SEGMENT_911_LOCATION IS NOT NULL, CONCAT('[E911/Loc:] ', SEGMENT_911_LOCATION, ' '), ''), 
    		IF(SEGMENT_911_CALLER IS NOT NULL, CONCAT('[E911/Caller:] ', SEGMENT_911_CALLER, ' '), ''),
    		IF(SEGMENT_911_SOURCE IS NOT NULL, CONCAT('[E911/Source:] ', SEGMENT_911_SOURCE, ' '), ''),
    		IF(SEGMENT_911_LATITUDE IS NOT NULL, CONCAT('[Ali/Lat:] ', SEGMENT_911_LATITUDE, ' '), ''),
    		IF(SEGMENT_911_LONGITUDE IS NOT NULL, CONCAT('[Ali/Lng:] ', SEGMENT_911_LONGITUDE, ' '), ''),
    		IF(SEGMENT_911_LOCATION IS NOT NULL, CONCAT('[Ali/Loc:] ', SEGMENT_911_LOCATION, ' '), '')
    	)
    WHEN SEGMENT_NAME = 'ALIGEO' THEN
    	CONCAT(
    		IF(SEGMENT_GEOXCOORD IS NOT NULL, CONCAT('[Geo/Long:] ', SEGMENT_GEOXCOORD, ' '), ''),
    		IF(SEGMENT_GEOYCOORD IS NOT NULL, CONCAT('[Geo/Lat:] ', SEGMENT_GEOYCOORD, ' '), '')
    	)
    WHEN SEGMENT_NAME = 'PROQA' THEN
    	CONCAT(
	    	IF(SEGMENT_CASE_NO IS NOT NULL, CONCAT('[Case:] ', SEGMENT_CASE_NO, ' '), ''),
	    	IF(SEGMENT_PROQA_CLASS IS NOT NULL, CONCAT('[Class:] ', SEGMENT_PROQA_CLASS, ' '), ''),
	    	IF(SEGMENT_NARRATIVE IS NOT NULL, CONCAT('[Comment:] ', SEGMENT_NARRATIVE), '')
	    )
    WHEN SEGMENT_NAME = 'ASSOC' THEN
	    CONCAT(
	    	IF(SEGMENT_SERVICE IS NOT NULL, CONCAT('[Service:] ', SEGMENT_SERVICE, ' '), ''),
	    	IF(SEGMENT_LINC_CALL IS NOT NULL, CONCAT('[EventNo:] ', SEGMENT_LINC_CALL, ' '), ''),
	    	IF(SEGMENT_AGENCY IS NOT NULL, CONCAT('[Agency:] ', SEGMENT_AGENCY, ' '), ''),
	    	IF(SEGMENT_CALLTYPE IS NOT NULL, CONCAT('[Type:] ', SEGMENT_CALLTYPE, ' ', IF(SEGMENT_CALLDESC IS NOT NULL, SEGMENT_CALLDESC, '')), '')
	    )
    WHEN SEGMENT_NAME IN ('NPREMS', 'PREMIS', 'NOMORE', 'MORE', 'HOLD', 'SELECT') THEN
    	IF(SEGMENT_NARRATIVE IS NOT NULL, CONCAT('[Comment:] ', SEGMENT_NARRATIVE), '')
    WHEN SEGMENT_NAME IN ('DISP', 'DISPER', 'DISPOS', 'XDISP', 'BACKER', 'BACKUP', 'BACKOS') THEN
    	CONCAT(
		    IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
		    IF(SEGMENT_UNIT IS NOT NULL AND SEGMENT_LOCATION IS NOT NULL, CONCAT('[Location:] ', SEGMENT_LOCATION, ' '), ''), 
		    IF(SEGMENT_OPERID_LIST IS NOT NULL, CONCAT('[OperID:] ', SEGMENT_OPERID_LIST, ' '), ''),
		    IF(SEGMENT_OPERNAMES IS NOT NULL, CONCAT('[OperNames:] ', SEGMENT_OPERNAMES, ' '), '')
		)
	WHEN SEGMENT_NAME = 'PRIU' THEN
	    IF(SEGMENT_UNIT IS NOT NULL, SEGMENT_UNIT, '')
	WHEN SEGMENT_NAME = 'CASE' THEN
	    CONCAT(
	    	IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
		    IF(SEGMENT_CASE_NO IS NOT NULL, CONCAT('[Case:] ', SEGMENT_CASE_NO), '')
		)
	WHEN SEGMENT_NAME IN ('ACK', 'ENRTE', 'MISCA', 'MISC', 'ONSCN', 'AIQ', 'CLEAR', 'AOR', 'CHANGE') THEN
		CONCAT(
			IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
			IF(SEGMENT_CALLTYPE IS NOT NULL, CONCAT('[Type:] ', SEGMENT_CALLTYPE, ' '), ''),
			IF(SEGMENT_CALLDESC IS NOT NULL, CONCAT('[Nature:] ', SEGMENT_CALLDESC, ' '), ''),
			IF(SEGMENT_DISPOSITION IS NOT NULL, CONCAT('[Disp:] ', SEGMENT_DISPOSITION, ' '), ''),
			IF(SEGMENT_NARRATIVE IS NOT NULL, CONCAT('[Comment:] ', SEGMENT_NARRATIVE), '')
		)
	WHEN SEGMENT_NAME = 'SEGMENT_INCIDENT_COMMANDER' THEN
		CONCAT(
			IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
			IF(SEGMENT_INCIDENT_COMMANDER IS NOT NULL, CONCAT('[ICUnit:] ', SEGMENT_INCIDENT_COMMANDER, ' '), ''),
			IF(SEGMENT_NARRATIVE IS NOT NULL, SEGMENT_NARRATIVE, '')
		)	
	WHEN SEGMENT_NAME = 'NOTIFY' THEN
		CONCAT(
			IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
			IF(SEGMENT_NOTIFIED IS NOT NULL, CONCAT('[Notified:] ', SEGMENT_NOTIFIED, ' '), ''),
			IF(SEGMENT_NARRATIVE IS NOT NULL, SEGMENT_NARRATIVE, '')
		)	
	ELSE
		CONCAT(
			IF(SEGMENT_UNIT IS NOT NULL, CONCAT(SEGMENT_UNIT, ' '), ''),
			IF(SEGMENT_NARRATIVE IS NOT NULL, CONCAT('[Comment:] ', SEGMENT_NARRATIVE), '')
		) 		
    END AS EntryText
  FROM CARSSEGMENTS
  WHERE SEGMENT_NAME NOT IN ('INVH', 'PALNAK', 'PALBGN', 'USTAT1');
  
  
-- 
-- View: IncidentUnit
-- 	  
  
DROP VIEW IF EXISTS IncidentUnit;
CREATE VIEW IncidentUnit AS
  SELECT 
    `UNITKEY` AS UnitId,  	
  	`TIMESTAMP` AS Timestamp,  	
	`UNIT_ID` AS Unit,
	`CALLKEY` AS EventNo,
	`CALL_NO` AS IncidentNo,
	`AlertTrans` AS AlertTrans,
	`UNIT_DISPATCH_INT` AS Dispatch,
	IF(UNIT_DISPATCH_INT > 0, FROM_UNIXTIME( UNIT_DISPATCH_INT ), NULL) AS DispatchUTC,
	`UNIT_ENROUTE_INT` AS Enroute,
	IF(UNIT_ENROUTE_INT > 0, FROM_UNIXTIME( UNIT_ENROUTE_INT ), NULL) AS EnrouteUTC,
	`UNIT_ONSCENE_INT` AS OnScene,
	IF(UNIT_ONSCENE_INT > 0, FROM_UNIXTIME( UNIT_ONSCENE_INT ), NULL) AS OnSceneUTC,
	CASE WHEN UNIT_CLEAR_INT > 0 THEN
		UNIT_CLEAR_INT ELSE
		UNIT_PREEMPT_INT 
	END AS InService,
	CASE WHEN UNIT_CLEAR_INT > 0 THEN
		FROM_UNIXTIME( UNIT_CLEAR_INT ) ELSE
		IF( UNIT_PREEMPT_INT > 0, FROM_UNIXTIME( UNIT_PREEMPT_INT ), NULL )
	END AS InServiceUTC,
	0 AS Status,
	CASE WHEN UNIT_CLEAR_INT > 0 OR UNIT_PREEMPT_INT > 0 THEN
		1 ELSE  -- CLEARED
		0 		-- ACTIVE
	END AS Closed
  FROM CARSCALLUNIT;
  
 
-- 
-- Trigger: Trigg_UnitDispatch
-- 	 Event: INSERT
--	Timing: BEFORE
--   Table: CARSCALLUNIT
--   Descr:	Trigger for invoking iCAD dispatching via database sync agent (icad-controller)
-- 	

DELIMITER ;;
 
DROP TRIGGER IF EXISTS `Trigg_UnitDispatch`;;
CREATE TRIGGER Trigg_UnitDispatch
BEFORE INSERT ON CARSCALLUNIT
FOR EACH ROW
BEGIN

-- Station dispatch/alert triggering

DECLARE DispFlag INT DEFAULT 0;
DECLARE RowExists INT DEFAULT 0;
DECLARE EventExists INT DEFAULT 0;
DECLARE _NotifyFlag INT;
DECLARE _CallGroup VARCHAR(16);
DECLARE _CallType VARCHAR(50);
DECLARE _BoxArea VARCHAR(50);

SELECT COUNT( t1.CALLKEY ) INTO RowExists
FROM CARSCALLUNIT t1
WHERE t1.CALLKEY = NEW.CALLKEY AND t1.UNIT_DISPATCH_INT = NEW.UNIT_DISPATCH_INT AND t1.UNITKEY = NEW.UNITKEY;

IF RowExists = 0 THEN

	SELECT COUNT( t1.CallNo ) INTO EventExists
	FROM CALLUNITEVENT t1
	WHERE t1.CallNo = NEW.CALL_NO AND t1.DispatchTime BETWEEN DATE_ADD( FROM_UNIXTIME(NEW.UNIT_DISPATCH_INT), INTERVAL -3 SECOND) AND DATE_ADD( FROM_UNIXTIME(NEW.UNIT_DISPATCH_INT), INTERVAL 3 SECOND) AND t1.UnitId = NEW.UNIT_ID;

	IF EventExists = 0 THEN

		SELECT COUNT( t1.UnitId ) INTO DispFlag
		FROM StationUnit t1
		RIGHT JOIN Station t2 ON t1.Station = t2.Station
		WHERE t1.UnitId = NEW.UNIT_ID AND t1.Inactive = 0;	

		IF DispFlag > 0 THEN
			SET New.AlertTrans = -1;
		END IF;
	
	END IF;
	
END IF;

-- Incident notification triggering

SELECT t1.BoxArea, t1.CallType, t2.CallGroup INTO _BoxArea, _CallType, _CallGroup
FROM Incident t1
LEFT JOIN CallType t2 ON t2.TypeCode = t1.CallType
WHERE t1.EventNo = NEW.CALLKEY;

SELECT COUNT( t2.RuleId ) INTO _NotifyFlag
FROM NotifyMember t1
RIGHT JOIN NotifyMemberRules t2 ON t1.ObjId = t2.MemberObjId
WHERE 
(
	(
		_BoxArea REGEXP t2.NotifyArea 
		AND 
		( 
			CONCAT('type:', _CallType) REGEXP t2.NotifyRuleset OR CONCAT('group:', _CallGroup) REGEXP t2.NotifyRuleset
		)
	)
	OR NEW.UNIT_ID REGEXP t2.NotifyUnits
)
AND t2.NotifyOnDispatch = 1 AND t1.Inactive = 0;

IF _NotifyFlag > 0 THEN

	INSERT INTO NotifyIncidentQueue ( EventNo, EventTime, EventType ) VALUES ( NEW.CALLKEY, NEW.UNIT_DISPATCH_INT, 1 ) 
	ON DUPLICATE KEY UPDATE NotifyIncidentQueue.Timestamp = NOW();
	 	
END IF;

END ;;

-- 
-- Trigger: Trigg_IncidentEntry
-- 	 Event: INSERT
--	Timing: AFTER
--   Table: CARSCALL
--   Descr:	Trigger for invoking iCAD pending/alertqueue notifications (icad-notifier)
--

DELIMITER ;;

DROP TRIGGER IF EXISTS `Trigg_IncidentEntry` ;;
CREATE TRIGGER Trigg_IncidentEntry 
AFTER INSERT ON CARSCALL
FOR EACH ROW
BEGIN

DECLARE _NotifyFlag INT;
DECLARE _CallGroup VARCHAR(16);

IF NEW.CALL_DISPATCH_INT IS NULL OR NEW.CALL_DISPATCH_INT = 0 THEN
	
	SELECT CallGroup INTO _CallGroup FROM CallType WHERE TypeCode = NEW.CALL_TYPE_FINAL;   
			
	SELECT COUNT( t2.RuleId ) INTO _NotifyFlag
	FROM NotifyMember t1
	RIGHT JOIN NotifyMemberRules t2 ON t1.ObjId = t2.MemberObjId
	WHERE 
		NEW.REP_DIST REGEXP t2.NotifyArea 
		AND 
		( 
			CONCAT('type:', NEW.CALL_TYPE_FINAL) REGEXP t2.NotifyRuleset OR CONCAT('group:', _CallGroup) REGEXP t2.NotifyRuleset
		)
		AND t2.NotifyOnActive = 1 AND t1.Inactive = 0;	
	
	IF _NotifyFlag > 0 THEN
	
		INSERT INTO NotifyIncidentQueue ( EventNo, EventTime, EventType ) VALUES ( NEW.CALLKEY, NEW.CALL_ENTRY_INT, 0 ) 
		ON DUPLICATE KEY UPDATE NotifyIncidentQueue.Timestamp = NOW();
		 	
	END IF;

END IF;

END ;;


-- 
-- Trigger: Trigg_IncidentEntryUpdate
-- 	 Event: UPDATE
--	Timing: AFTER
--   Table: CARSCALL
--   Descr:	Trigger for invoking iCAD pending/alertqueue notifications (icad-notifier)
--

DELIMITER ;;

DROP TRIGGER IF EXISTS `Trigg_IncidentEntryUpdate` ;;
CREATE TRIGGER Trigg_IncidentEntryUpdate 
AFTER UPDATE ON CARSCALL
FOR EACH ROW
BEGIN

DECLARE _ActiveAlert INT;
DECLARE _NotifyFlag INT;
DECLARE _CallGroup VARCHAR(16);

IF NEW.CALL_DISPATCH_INT IS NULL OR NEW.CALL_DISPATCH_INT = 0 THEN

	SELECT t1.NotifyId INTO _ActiveAlert FROM NotifyIncident t1 WHERE t1.EventNo = NEW.CALL_NO AND t1.EventTime = NEW.CALL_ENTRY_INT AND t1.EventType = 0;	
	SELECT CallGroup INTO _CallGroup FROM CallType WHERE TypeCode = NEW.CALL_TYPE_FINAL;   
				
	IF _ActiveAlert >= 0 AND ( NEW.CALL_TYPE_FINAL_D != OLD.CALL_TYPE_FINAL_D OR NEW.LOCATION_ADDRESS != OLD.LOCATION_ADDRESS OR NEW.REP_DIST != OLD.REP_DIST ) THEN
		
		INSERT INTO NotifyIncidentQueue ( EventNo, EventTime, EventType ) VALUES ( NEW.CALLKEY, NEW.CALL_ENTRY_INT, 0 ) 
		ON DUPLICATE KEY UPDATE NotifyIncidentQueue.Timestamp = NOW();
			
	ELSE 	
	
		SELECT COUNT( t2.RuleId ) INTO _NotifyFlag
		FROM NotifyMember t1
		RIGHT JOIN NotifyMemberRules t2 ON t1.ObjId = t2.MemberObjId
		WHERE 
			NEW.REP_DIST REGEXP t2.NotifyArea 
			AND 
			( 
				CONCAT('type:', NEW.CALL_TYPE_FINAL) REGEXP t2.NotifyRuleset OR CONCAT('group:', _CallGroup) REGEXP t2.NotifyRuleset
			)
			AND t2.NotifyOnActive = 1 AND t1.Inactive = 0;	
	END IF;
	
	IF _NotifyFlag > 0 THEN
	
		INSERT INTO NotifyIncidentQueue ( EventNo, EventTime, EventType ) VALUES ( NEW.CALLKEY, NEW.CALL_ENTRY_INT, 0 ) 
		ON DUPLICATE KEY UPDATE NotifyIncidentQueue.Timestamp = NOW();
		
	END IF;

END IF;

END ;;

